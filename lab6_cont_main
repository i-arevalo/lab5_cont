/*
 * File:   lab6_cont_main.c
 * Author: Arevalo
 * Referencias: Se tomó como referencia el código de Pablo Mazariegos en Github
 * Created on 28 de febrero de 2020, 06:56 AM
 */
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)


#include <xc.h>
#include <stdint.h>
#include "I2C.h"

#define _XTAL_FREQ 4000000

void init(void);

uint8_t temp;
uint8_t cont;

void __interrupt() inter(void)
{
    //Interrupción de comunicación I2C
    if (PIR1bits.SSPIF == 1){
        SSPCONbits.CKP = 0;
        //Sentencia para saber si la comunicacion I2C fue correcta
        if ((SSPCONbits.SSPOV) || (SSPCONbits.WCOL)){
            temp = SSPBUF;                 // Read the previous value to clear the buffer
            SSPCONbits.SSPOV = 0;       // Clear the overflow flag
            SSPCONbits.WCOL = 0;        // Clear the collision bit
            SSPCONbits.CKP = 1;         // Enables SCL (Clock)
        }
        //Sentencia para leer datos en el I2C
        if(!SSPSTATbits.D_nA && !SSPSTATbits.R_nW) {
            //__delay_us(7);
            temp = SSPBUF;                 // Lectura del SSBUF para limpiar el buffer y la bandera BF
            //__delay_us(2);
            PIR1bits.SSPIF = 0;         // Limpia bandera de interrupción recepción/transmisión SSP
            SSPCONbits.CKP = 1;         // Habilita entrada de pulsos de reloj SCL
            while(!SSPSTATbits.BF);     // Esperar a que la recepción se complete
            temp = SSPBUF;             // Guardar en el PORTD el valor del buffer de recepción
            __delay_us(250);
        }
        //Sentencia para enviar datos en el I2C
        else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW){
            temp = SSPBUF;
            BF = 0;
            SSPBUF = cont;//Se envia el valor del contador por I2C
            SSPCONbits.CKP = 1;
            __delay_us(250);
            while(SSPSTATbits.BF);
        }
        PIR1bits.SSPIF = 0;//Se vuelve a activar la bandera para la interrupcion de I2C
    }
}

void main(void) {
    init();
    I2C_Slave_Init(0x10);
    cont = 0;
    while(1){
        if (PORTBbits.RB0 == 0){//sentencia para aumento del contador
            while(PORTBbits.RB0 == 0){}
            __delay_ms(5);
            cont++;
            if (cont>0x0F)
                cont=0;
        }
        else if (PORTBbits.RB1 == 0){//sentencia para decremento del contador
            while (PORTBbits.RB1 == 0){}
            __delay_ms(5);
            if (cont == 0)
                cont = 0x0F;
            else 
                cont--;
        }
        PORTA = cont;//Se imprime el valor del contador en el puerto A
    }
}

void init(void){
   TRISBbits.TRISB0 = 1;
   TRISBbits.TRISB1 = 1;
   ANSELH = 0x00;
   ANSEL = 0x00;
   TRISA = 0x00;
   PORTA = 0;
   PORTB = 0;
}
